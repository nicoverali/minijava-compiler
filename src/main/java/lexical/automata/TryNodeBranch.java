package lexical.automata;

import io.code.reader.SourceCodeReader;
import org.jetbrains.annotations.Nullable;

/**
 * This type of branch is able to delegate work to the next node, but if a lexical error is detected, and thus
 * a {@link lexical.LexicalException} gets thrown, this branch will simply return a <code>null</code> value.
 *
 * @param <T> type of {@link LexicalNode} connected by this branch
 * @param <U> type of return value by delegating
 */
public interface TryNodeBranch<T extends LexicalNode<?,?>, U> extends NodeBranch<T>{

    /**
     * Tries to delegate work to the next node, returning an element of type {@link U} generated by the node.
     * If a lexical error has been detected, and thus a {@link lexical.LexicalException} gets thrown, then it will
     * simply return a <code>null</code> value.
     * <br>
     * Only if delegation ends successfully the current next character of <code>reader</code> will be consumed.
     *
     * @param reader a {@link SourceCodeReader} to take its characters as input
     * @return a element of type {@link U} generated by the next node, or null if a lexical error occurs
     */
    @Nullable
    U tryDelegate(SourceCodeReader reader);

}
